=head1 Preconditions

The central thing that is needed before a test is run is a so called
B<precondition>. Creating those preconditions is the main task
needed to do when using the automation framework.

Most of the I<preconditions> describe packages that need to be
installed. Other preconditions describe how subdirs should be copied
or scripts be executed.

A I<precondition> can depend on other preconditions, leading to a
tree of preconditions that will be installed from the leaves to the
top.


=head2 SYNOPSIS

=head2 Layers of preconditions

=head2 Precondition repository

=head2 Overview Precondition Types

=head2 Details Precondition Types

=head2 Macro Preconditions

=head2 Interdepending Testruns

=head2 Testplans

=head2 Precondition Producers

=over 4

=item * Create a (maybe temporary) file

=item * Define conditions for a testrun: the C<preconditions>

=item * Put the precondition into the database, maybe referring to other preconditions

=item * Create a testrun in the database, referring to the precondition

=item * Wait until the testrun is executed and results are reported

=back


=head2 Layers of preconditions

There are ``normal preconditions'' and ``macro preconditions''.

=head3 Normal preconditions

We store preconditions in the database and assign I<testruns> to
them (also in the database).

Usually the preconditions were developed in a (temporary) file and
then entered into the database with a tool. After that the temporary
file can be deleted. Note that such a precondition file can contain
multiple precondition as long as they are formated as valid YAML.

I<Preconditions> can be kept in files to re-use them when creating
testruns but that's not needed for archiving purposes, only for
creation purposes.

Please note: B<Normal preconditions are usually not what you
want.> It's the low level mechanism. Its advantage is in reusing the
preconditions by referring to IDs and creating trees of
preconditions. This reuse is usually too complex. B<What you
typically want are Macro Preconditions>.

=head3 Macro preconditions

There is another mechanism on top of normal preconditions: C<Macro
Preconditions>. These allow to bundle B<multiple> preconditions
at once into a common use-case.

A I<macro precondition> is evaluated when the testrun is added via
the cmdline utils (or the web app, both use the same underlying
layer). The result are ``normal preconditions'' which are inserted
into the DB everytime together with the testrun, so there is no reuse
of preconditions and preconditions are always a list, no tree. Anyhow,
they are much easier to handle.

I<Macro preconditions> are template files which should be archived
in the precondition repository, as only the finally resulting
preconditions are stored in the database.

=head3 Testplans

Testplans are a variant of macro preconditions to control multiple
testruns and queue them to particular hosts and queues. They are
mostly useful to provide end-users with complex but polished frontend
use-cases where they can define values to prepared parameters.

=head2 Precondition repository

Macro preconditions can be stored in

  /data/tapper/live/repository/macropreconditions/

=head2 Overview Precondition Types

There are two variants of preconditions: I<Action preconditions>
and I<Highlevel preconditions>. Action preconditions describe
single actions, like ``copy a file'' or ``execute a
program''. Highlevel preconditions can contain other (action)
preconditions and are used for instance for virtualization install
scenarios where hosts and guests are described.

B<Please note the wording>: A precondition is the particular
YAML block with all the details (think of an object instance). Such a
block is of a ``precondition type'' which defines its allowed
structure (think of a class).

=head3 Overview: Action precondition types

The following I<action> precondition types are allowed:

=over 4

=item * package

A package (kernel, library, etc.), of type I<.tar>, I<.tar.gz> or I<.tar.bz2>

=item * image

A complete OS image of type I<.iso>, I<.tar.gz>, I<.tgz>,
I<.tar>, I<.tar.bz2>

=item * prc

Create a config for the I<PRC> module of the automation layer.

=item * copyfile

One file that can just be copied/rsync'd

=item * installer_stop

Don't reboot machine after system installer finished

=item * grub

Overwrite automatically generated grub config with one provided by the tester

=item * fstab

Append a line to /etc/fstab

=item * repository

Fetch data from a git, hg or svn repository

=item * exec

Execute a script during installation phase

=item * reboot

Requests a reboot test and states how often to reboot.

=item * cobbler

Use Cobbler to install the test system.

=back


=head3 Overview: Highlevel precondition types

Currently only the following I<high level> precondition type is
allowed:

=over 4

=item * virt

Generic description for Xen or KVM

=back


I<High level preconditions> both define stuff and can also contain
other preconditions.

They are handled with some effort to I<Do The Right Thing>, i.e.,
a defined root image in the high level precondition is always
installed first. All other preconditions are installed in the order
defined by its tree structure (depth-first).

=head2 Details Precondition Types

We describe preconditions in YAML files (L<http://www.yaml.org/>).

All preconditions have at least a key

 precondition_type: TYPE

and optionally

  name: VERBOSE DESCRIPTION
  shortname: SHORT DESCRIPTION

then the remaining keys depend on the TYPE.

=head3 installer_stop

stop run after system installer

  ---
  precondition_type: installer_stop

=head3 grub

overwrite automatically generated grub config

  ---
  precondition_type: grub
  config: |
    title Linux
      root $grubroot
      kernel /boot/vmlinuz root=$root"

=over 4

=item * Note: multiple lines in the grub file have to be given as one
line separated by ``\n'' (literally a backslash and the letter n) in
YAML

=item * the variables $grubroot and $root are substituted with grub and /dev/* notation of the root partition respectively

=item * $root substitution uses the notation of the installer kernel. This may cause issues when the installer detects /dev/sd? and the kernel under test detects /dev/hd? or vice versa

=item * since grub always expects parentheses around the device, they are part of the substitution string for $grubroot

=item * note the syntax, to get multiline strings in YAML you need to
start them with |, a newline and some indentation

=back

=head3 package

  ---
  precondition_type: package
  filename: /data/tapper/live/repository/packages/linux/linux-2.6.27.7.tar.bz2

=over 4

=item * path names can be absolut or relative to
 /data/tapper/development/repository/packages/

=item * supported packages types are rpm, deb, tar, tar.gz and tar.bz2

=item * package type is detected automatically

=item * absolute path: usually /data/tapper/...

=item * relative path: relative to /data/tapper/(live|development)/

=back

=head3 copyfile

a file that just needs to be scp or copied:

  ---
  precondition_type: copyfile
  protocol: nfs
  source: osko:/export/image_files/official_testing/README
  dest: /usr/local/share/tapper/

=over 4

=item * supported protocols are ``scp'', ``nfs'' and ``local''

=item * the part before the first colon in the unique name is used as server name

=item * the server name part is ignored for local

=item * if dest ends in a slash, the file is copied with its basename preserved into the denoted directory

=item * whether the ``dest'' is interpreted as a directory or a file is decided by the underlying ``scp'' or ``cp'' semantics, i.e., it depends on whether a directory already exists.

=back

=head3 fstab

a line to add to /etc/fstab, e.g., to enable mounts once the system boots

  ---
  precondition_type: fstab
  line: "165.204.85.14:/vol/osrc_vol0 /home nfs auto,defaults 0 0"

=head3 image

usually the root image that is unpacked to a partition
(this is in contrast to a guest file that's just there)

  ---
  precondition_type: image
  mount: /
  partition: testing
  image: /data/tapper/live/repository/images/rhel-5.2-rc2-32bit.tgz

=over 4

=item * partition and mount are required, all other options are optional

=item * mount points are interpreted as seen inside the future installed system

=item * if no image is given, the already installed one is reused, i.e., only the mountpoint is mounted; make sure this is possible or your test will fail!

=item * can be either an iso file which is copied with dd or a tar, tar.gz or
 tar.bz2 package which is unpacked into the partition

=item * partitions are formated ext3 (only when image is given)
and mounted to mount afterwards

(this is why image exists at all, copyfile does not provide this)

=item * ``image'': absolute or relative path (relative to /data/tapper/live/repository/images/)

If not given, then it re-uses the partition without formatting/unpacking it.

=item * partition: Can be /dev/XXX or LABEL or UUID.

=back

=head3 repository

  ---
  precondition_type: repository
  type: git
  url: git://git.kernel.org/pub/scm/linux/kernel/git/avi/kvm.git
  target: kvm
  revision: c192a1e274b71daea4e6dd327d8a33e8539ed937

=over 4

=item * git and hg are supported

=item * type and url are mandatory, target and revision are optional

=item * target denotes the directory where the source is placed in,
the leading slash can be left out (i.e., paths can be given relative
to root directory C</>).

=back

=head3 type: prc

Is typically contained implicitely with the abstract precondition
I<virt>. But can also be defined explicitely, e.g., for kernel
tests.

Creates config for PRC. This config controls what is to be run and
started when the machine boots.

  precondition_type: prc
  config:
       runtime: 30
       test_program: /bin/uname_tap.sh
       timeout_after_testprogram: 90
       guests:
        - svm:  /xen/images/..../foo.svm
        - svm:  /xen/images/..../bar.svm
        - exec: /xen/images/..../start_a_kvm_guest.sh

=over 4

=item * guest number

If it is a guest, for host system use 0.

=item * test_program

startet after boot by the PRC

=item * runtime

The wanted time, how long it runs, in seconds, this value will be used
to set an environment variable C<TAPPER_TS_RUNTIME>, which is
used by the test suite wrappers.

=item * timeout_testprogram

Time that the testprogram is given to run, at most, after that it is
killed (SIGINT, SIGKILL).

=item * guests

Only used for virtualization tests. Contains an array, one entry per
guest which defines how a guest is started. Can be a SVM file for Xen
or an executable for KVM.

=back

=head3 type: exec

Defines which program to run at the installation phase.

  precondition_type: exec
  filename: /bin/some_script.sh
  options:
    - -v
    - --foo
    - --bar="hot stuff"
the following lesson:

=head3 type: hint

Such a precondition provides hints where normal behaviour needs to be
changed. It contains any hash keys needed for the special handling. The
special handling itself is done in the MCP and needs to be prepared
for what you specify here.

We currently use it to handle SimNow testing.

  precondition_type: hint
  simnow: 1
  script: family10_sles10_xen.simnow

=head3 quote subtleties

Please note some subtlety about quotes.

=over 4

=item * This is YAML. And YAML provides its own way of quoting.

So this

  precondition_type: exec
  filename: /bin/some_script.sh
  options:
    - --foo

and this

  precondition_type: exec
  filename: /bin/some_script.sh
  options:
    - "--foo"

are actually the same (the value is always: C<--foo>) because
quotes at the beginning and end of a YAML line are used by YAML. When
you use quotes at other places like in

  precondition_type: exec
  filename: /bin/some_script.sh
  options:
    - --bar="hot stuff"

then they are not part of the YAML line but part of the value, so this
time the value is: C<--bar="hot stuff">.

=item * Quotes are not shell quotes.

So if you used quotes and they are not YAML quotes but part of the
value then you should know that they are B<not> evaluated by a
shell when C<some_script.sh> is called, because we use
C<system()> without a shell layer to start it.

That's why in above example the quoted value C<"hot stuff"> (with
quotes!) is given as parameter C<--bar> to the program. This
usually B<not> what you want.

=item * Summary: Yo nearly never need quotes.

This is good enough:

  precondition_type: exec
  filename: /bin/some_script.sh
  options:
    - -v
    - --foo
    - --bar=hot stuff

=back

=head3 type: reboot

Requests a reboot test and states how often to reboot.

B<Note:> Reboot count of 1 actually means boot two times since
the first boot is always counted as number 0.

  precondition_type: reboot
  count: 2

=head3 type: autoinstall

Install a system using autoinstall scripts. The filename denotes the
grub config to be used. It is mandatory and can be given as absolut
path or relative to /data/tapper/.../repository/install_grub/. The
optional timeout is measured in second. If its absent a default value
is used.

  precondition_type: autoinstall
  filename: suse/SLES10SP3_x86_64.lst
  timeout: 1800

=head3 type: testprogram

Define which test program to run. This way of defining a test program
should be prefered to using the B<PRC> type precondition. Only the
B<testprogram> precondition guarantees parsing that sets all
internal Tapper variables correctly.

Testprograms allow a key C<chdir> which can either contain a
particular directory where to chdir before testprogram execution or
the value C<AUTO> (uppercase) which means to chdir to the dirname
of the program.

  precondition_type: testprogram
  runtime: 30
  program: /bin/uname_tap.sh
  timeout: 90
  parameters:
  - --verbose

=head3 type: autoinstall

Install a system using autoinstall scripts. The filename denotes the
grub config to be used. It is mandatory and can be given as absolut
path or relative to /data/tapper/.../repository/install_grub/. The
optional timeout is measured in second. If its absent a default value
is used.

  precondition_type: autoinstall
  filename: suse/SLES10SP3_x86_64.lst
  timeout: 1800

=head3 type: cobbler

Install a system using Cobbler. The profile denotes a profile exactly
as known by Cobbler. The timeout allows you to limit the time used for
installation.

  precondition_type: cobbler
  profile: ubuntu-12.04-64
  timeout: 1800


=head3 type: virt

A virtualization environment.

(The linebreaks with \ are not part of the actual file, but only for
this document.)

  precondition_type: virt
  name: automatically generated Xen test
  host:
    preconditions:
    - precondition_type: package
      filename: /data/tapper/live/repository/packages/xen/builds/\
                x86_64/xen-3.3-testing/\
                xen-3.3-testing.2009-03-20.18614_f54cf790ffc7.x86_64.tgz
    - precondition_type: package
      filename: /data/tapper/live/repository/packages/tapperutils/\
                sles10/xen_installer_suse.tar.gz
    - precondition_type: exec
      filename: /bin/xen_installer_suse.pl
    root:
      precondition_type: image
      partition: testing
      image: suse/suse_sles10_64b_smp_raw.tar.gz
      mount: /
      arch: linux64
    testprogram:
      execname: /opt/tapper/bin/tapper_testsuite_dom0_meta.sh
      timeout_testprogram: 10800
  guests:
  - config:
      precondition_type: copyfile
      protocol: nfs
      name: tapper:/data/tapper/live/repository/configs/\
                   xen/001-sandschaki-1237993266.svm
      dest: /xen/images/
      svm: /xen/images/001-sandschaki-1237993266.svm
    root:
      precondition_type: copyfile
      protocol: nfs
      arch: linux64
      name: osko:/export/image_files/official_testing/\
            redhat_rhel4u7_64b_up_qcow.img
      dest: /xen/images/
      mountfile: /xen/images/001-sandschaki-1237993266.img
      mounttype: raw
    testprogram:
      execname: /opt/tapper/bin/py_ltp
      timeout_after_testprogram: 10800

=over 4

=item * guest root always needs to name the file to mount since
its not easy or even impossible to get this name for some ways to install
the root image (like tar.gz packages or subdir)

=item * guest root and guest config are installed inside the host,
guest preconditions are installed inside the guest image

=item * guests can be started with xm create $xenconf, evaluation of
$kvmconf or executing the $execconf script, thus only one of these
three must be provided

=item * '''Note''': virt instead of virtualisation is used to reduce
confusion for users whether British English (virtualisation) or
American English (virtualization) is expected

=item * key ``arch''
 arch: linux64 | linux32             (needed for for tapper toolchain)

=back

=head3 General precondition keys ``mountfile''

These 2 options are possible in each precondition. With that you can
execute the precondition inside guest images:

  mountfile: ...
  mountpartition: ...
  mounttype: @TODO{is this the same as mountfile, mountpartition?}

=over 4

=item 1. only mountfile: eg. rawimage, file loop-mounted

=item 2. only mountpartition: then mount that partition

=item 3. image file with partitions: mount the imagefile and from that
only the given partition

=back


=head2 Macro Preconditions

This section describes macro precondition files as they are stored in
C</data/tapper/live/repository/macropreconditions/>.

A macro precondition denotes a file containing one or multiple
preconditions and additional TemplateToolkit code.

In most cases ``normal preconditions'' for similar tests will only
differ in one or very few keys. Thus precondition files could easily
be reused by only changing these few keys. This is made easier with
using ``macro preconditions''.

The macro precondition file should contain all ``normal
preconditions'' to be reused. All variable keys should be substituted
by appropriate TemplateToolkit variables. When creating the new
testrun actual values for these TemplateToolkit variables have to
provided.

Macro preconditions are B<not> stored in the database. They are
only a tool to ease the creation of preconditions. Only the
B<resulting> preconditions are stored in database.

To make parsing macro preconditions easier required and optional
fields can be named after a comment field in the first lines of the

  # tapper-mandatory-fields: id
  # tapper-optional-fields: kernel

These C<# tapper-*> headers are also used in web frontend to
render forms out of it and submit testruns from there.

The values for the placeholders can be filled via such a command line:

  $ tapper testrun-new [all usual options] \
       --macroprecond=FILENAME \
        -Did=value1 \
        -Dkernel=2.6.37

The FILENAME is a complete filename with absolute path.

There is no restriction on TemplateTsubstitution. The following example could be used to generate a
default value for the precondition key id.

  [%id = BLOCK%][%IF id%][%id%][%ELSE%]2009-06-29-perfmon[%END%][%END%]


=head3 A real live example - kernel boot test

=over 4

=item * Macroprecondition

  # tapper-mandatory-fields: kernel_version
  # tapper-optional-fields: kernelpkg
  ---
  precondition_type: image
  arch: linux64
  image: suse/suse_sles10_64b_smp_raw.tar.gz
  mount: /
  partition: testing
  ---
  precondition_type: copyfile
  name: /data/tapper/live/repository/testprograms/uname_tap/uname_tap.sh
  dest: /bin/
  protocol: local
  ---
  precondition_type: copyfile
  name: /data/tapper/live/repository/packages/tapperutils/kernel/gen_initrd.sh
  dest: /bin/
  protocol: local
  ---
  [% kernelpkg = BLOCK %]\
  [% IF kernelpkg %]\
  [% kernelpkg %]\
  [%ELSE%]kernel/linux-[% kernel_version %].tar.gz[% END %]\
  [% END %]
  precondition_type: package
  filename: [% kernelpkg %]
  ---
  precondition_type: exec
  filename: /bin/gen_initrd.sh
  options:
    - [% kernel_version %]
  ---
  precondition_type: prc
  config:
        runtime: 30
        test_program: /bin/uname_tap.sh
        timeout_testprogram: 90


=item * The test script

The test script C<uname_tap.sh> to which the macro precondition
refers is just a shell script that examines uname output:

  #! /bin/sh
  echo "1..2"
  echo "# Tapper-Suite-Name: Kernel-Boot"
  echo "# Tapper-Suite-Version: 1.00"
  echo "# Tapper-Machine-Name: " `hostname`

  if [ x`uname` != xLinux ] ; then echo -n "not " ; fi
  echo "ok - We run on Linux"

  if uname -a | grep -vq x86_64 ; then echo -n "not " ; fi
  echo "ok - Looks like x86_64"

=item * Command line

Once you wrote the macro precondition and the test script all you need
is this command line:

  tapper testrun-new \
    --hostname=dickstone \
    --macroprecond \
      /data/tapper/live/repository/macropreconditions/kernel/kernel_boot.mpc \
     -Dkernelpkg=perfmon-682-x86_64.tar.gz \
     -Dkernel_version=2.6.28-rc3

or with some more information (owner, topic):

  tapper testrun-new \
    --owner=mhentsc3 \
    --topic=Kernel \
    --hostname=dickstone \
    --macroprecond \
      /data/tapper/live/repository/macropreconditions/kernel/kernel_boot.mpc \
     -Dkernelpkg=perfmon-682-x86_64.tar.gz \
     -Dkernel_version=2.6.28-rc3

=back

=head2 Interdepending Testruns

This section describes interdepending testruns. Usually there is a one
to one relation between a testrun and a host. This means a testruns uses
exactly one host. There are use cases where this is not enough. A very
common example is a client-server test. With the usually setup client
and server would be separate testruns which would be scheduled
separately whenever appropriate  machines are available. To make sure
client and server testrun are scheduled and executed together you need
to use the interdep scenario. An interdep scenario config may look like
this:

  scenario_type: interdep
  description:
  - requested_hosts:
    - johnconnor
    preconditions:
    - arch: linux64
      image: suse/sles11_baseimage.tar.gz
      mount: /
      partition: sda2
      precondition_type: image
    - precondition_type: testprogram
      program: /opt/tapper/bin/tapper-testsuite-netperf-server
      timeout: 1000
  - requested_hosts:
    - sarahconnor
    preconditions:
    - arch: linux64
      image: suse/sles11_baseimage.tar.gz
      mount: /
      partition: sda2
      precondition_type: image
    - precondition_type: testprogram
      program: /opt/tapper/bin/tapper-testsuite-netperf-client
      timeout: 1000

Write the scenario config above into a file and put it up for scheduling with:
  tapper scenario-new --file \
      /data/ta/data/tapper/live/configs/scenarios/interdep.sc

When the scheduler decides the first part of these two testruns is to
run now, it will see that it is part of a scenario. It will therefore
withhold the execution of this testrun. It will also mark all testruns
belonging to the same scenario (one in this case) to bypass
scheduling. This way the remaining testruns will be scheduled as soon as
appropriate hosts become available. When hosts for all testruns are
available they all will start their installation synchronously. Also,
they will synchronize the start of their first test program
automatically. This makes sure that client and server are started as
close together as possible.


=head2 Testplans

This section describes testplan files as they are stored in
C</data/tapper/live/testplans/>.

A testplan is very similar to a macro precondition but can
additionally bundle several testruns and specify required hostname and
used queue inside. This and the possibility of using Template-Toolkit
(see Macro Preconditions) inside makes it most useful for frontend
usage: You can take all parameters, especially queue+hosts from
commandline via C<-Dhosts=affe,zomtec,birne>, split them via
Temaplte Toolkit and loop to create multiple testruns.

To tell it's one test out of a set, we use the type
C<multitest>, like this:

  ---
  type: multitest
  description:
    shortname: my-testplan
    topic: my-testplan
    queue: AdHoc
    requested_hosts_all:
    - affe
    - zomtec
    preconditions:
    - ...
    - ...

The preconditions are then as already described in earlier chapters.

It additionally allows to embed self-documentation which can be viewd
with the command C<tapper testplan-new --guide --file
my-testplan-file>.

To take parameters and create multiple testruns, you could use it like
this:

  ### This is an example testplan
  ### Allowed params:
  ###  - -Dqueue=QUEUE
  ###  - -Dtests=TEST1,TEST2,TEST3
  ###  - -Dmachines=HOST1,HOST2
  [%# define default values %]
  [%- IF queue == '' %][% queue = 'AdHoc' %][% END -%]
  [%- IF tests == '' %][% tests = 'hackbench' %][% END -%]
  [%- IF machines == '' %][% machines = 'arges' %][% END -%]
  [% AllTests = tests.split(',') %]
  [% AllDistros = distros.split(',') %]
  [% AllMachines = machines.split(',') %]
  [%- FOREACH machine = AllMachines %]
  [%- FOREACH test = AllTests %]
  ---
  type: multitest
  description:
    shortname: [% test %]
    topic: Topic-[% AllTests.join('-') %]
    queue: [% queue %]
    requested_hosts_all:
    - [% machine %]
    preconditions:
    - ...
    -
      precondition_type: testprogram
      program: /opt/tapper/bin/tapper-testsuite-autotest
      parameters:
        - --test
        - [% test %]
    - ...

From a command line this can be used like below.

Show self-doc:

   $ tapper testplan-new --guide --file my-testplan

     This is an example testplan
     Allowed params:
      - -Dqueue=QUEUE
      - -Dtests=TEST1,TEST2,TEST3
      - -Dmachines=HOST1,HOST2

Start a new testplan consisting of potentially many testruns:

   $ tapper testplan-new --verbose \
                    --file my-testplan \
                    -Dqueue=TrackWorkload \
                    -Dtests=hackbench,dbench

     Plan created
       id:
       241
       url: http://tapper/tapper/testplan/id/241
       path: topic/kernel/misc/my-testplan
       file: /data/tapper/topic/kernel/misc/my-testplan

Whenever you want to provide a polished use-case to an end-user
consider writing a testplan file. You add all the complexity, details
and documentation into the file and provide your user with just this
file. He/she can then specify the prepared parameters for his/her
particular needs, like the tests to run.

We additionally use Testplans to bi-directional map from such
testplans to a task in our planning software where we simply assume a
mapping of the task hierarchy to a subdirectory hierarchy.

Based on this mapping the planning software can specify when to
execute such a testplan according to the project plan.

A testplan then typically contains several testruns: some for the
known-good sanity tests without a changed feature and some for the
actual tested feature.

=head2 Precondition Producers

Sometimes, parameters for preconditions shall be defined when the
newest build of a certain package. Also in combination with autorerun
testruns dynamic assignment of preconditions is useful. These testruns
are reinserted into the database automatically as soon as the
scheduler chooses them for execution. In this case dynamic
precondition assignment allows these rerun tests to differ
slightly. Preconditions with dynamically assigned parameters are
called I<Lazy Precondition>.

Dynamic precondition assignment is implemented using I<Precondition
Producers>. A producer is a modul that is called by the scheduler for
handling of lazy preconditions. To use a lazy preconditio the user has
to assign a precondition of type C<producer> to the testrun. This
precondition has to contain the basename of an existing producer
module and may contain additional parameters. The producer will
substitute the C<producer> precondition with a normal precondition
that has values assigned to all parameters.

=head3 Lazy precondition

Lets assume for example that you want to include the newest kernel
package into your test. This can be achieved with the existing
``Kernel'' producer. Instead of a precondition of type C<package>
with a certain filename you should assign the following precondition
to your testrun.

  precontition_type: producer
  producer: Kernel

This precondition will be substituted with a package precondition that
has the latest Sysint kernel build set as filename.

=head3 Producer API

Producer are modules loaded into the scheduler. Thus they need to be
written in Perl and reside inside the
C<Tapper::MCP::Scheduler::PreconditionProducer::> namespace. A
producer has to implement a method C<produce>. This function gets
a job object as first parameter and a hash containing all additional
options from the precondition as second parameter. It suggested that
each producer inherits from
C<Tapper::MCP::Scheduler::PreconditionProducer>. Producers shall
return a hash that has the produced preconditions as YAML text
assigned to the hash key C<precondition_yaml>. An optional key
C<topic> allows the producer to set the topic for the test. If the
hash key C<error> is set, the associated error string is reported
and the testrun is cancled. In this case the other hash keys are not
evaluated.

=head3 Existing producers

Currently the following producers exist:

=over 4

=item * DummyProducer.pm

Dummy producer for testing.

=item * Kernel.pm

Produces preconditions for kernel tests.

=item * NewestPackage.pm

Produces a package precondition that installs the newest package from
a given directory.

=item * SimnowKernel.pm

Produces preconditions for simnow kernel tests.

=item * Temare.pm

Wraps the existing temare producer utility.

=back


=head3 Example: ``Kernel'' precondition producer

The kernel producer returns a package precondition that contains the
latest kernel package from the kernel package path. Furthermore, it
returns an exec precondition that triggers the creation of an initrd
file for the kernel.

Valid options:

=over 4

=item * arch

May be x86_64 or i686. The latest kernel package from the associated
path are used.

=item * version

Only use kernel packages that contain the given version string

=item * stable

Use stable kernels when true

=back

=head4 Lazy precondition

The lazy precondition, pointing to the ``Kernel'' precondition
producer:

  precondition_type: produce
  producer: Kernel
  arch: i686
  version: 2.6.32
  stable: 1

=head4 Resulting preconditions

The resulting preconditions may look like this:

  ---
  precondition_type: package
  filename: kernel/stable/i686/kernel-2.6.32-rc1.tar.gz
  ---
  precondition_type: exec
  filename: /bin/gen_initrd.sh
  options:
    - 2.6.32-rc1

